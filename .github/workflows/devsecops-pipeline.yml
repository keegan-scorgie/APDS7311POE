name: DevSecOps Admin Auth Pipeline

on:
  push:
    branches:
      - main

jobs:
  admin-auth-pipeline:
    runs-on: ubuntu-latest

    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      ATLAS_URI: ${{ secrets.ATLAS_URI }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install git-secrets
        run: |
          sudo apt-get update
          sudo apt-get install -y git-secrets
          git secrets --register-aws  # Optional: if you're specifically looking for AWS secrets
          git secrets --scan  # Run secret scan

      - name: Run Security Check
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run Linter
        run: npm run lint

      - name: Run Admin Auth Tests
        run: npm test -- --grep 'Admin Login'

      - name: Check Configurations for Hardcoded Secrets
        run: |
          if grep -q "hard-coded-password" config/*; then
            echo "Hard-coded password detected in configuration files."
            exit 1
          fi

      - name: Create Admin Account if Not Exists
        run: |
          echo "Checking if admin account exists..."
          echo "MongoDB URI: ${{ secrets.ATLAS_URI }}"
          echo "Admin Username: ${{ secrets.ADMIN_USERNAME }}"
          node -e "
            const { MongoClient } = require('mongodb');
            const bcrypt = require('bcryptjs');
            const uri = process.env.ATLAS_URI;
            const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

            async function createAdmin() {
              try {
                console.log('Connecting to MongoDB...');
                await client.connect();
                const db = client.db();
                const collection = db.collection('employees'); // Replace 'employees' with your collection name if needed
                
                // Debugging: Log the current state of the collection
                const count = await collection.countDocuments({});
                console.log('Current document count in collection:', count);

                const existingAdmin = await collection.findOne({ username: process.env.ADMIN_USERNAME });

                if (!existingAdmin) {
                  console.log('Admin account does not exist. Creating new one...');
                  const salt = await bcrypt.genSalt(10);
                  const hashedPassword = await bcrypt.hash(process.env.ADMIN_PASSWORD, salt);
                  await collection.insertOne({
                    username: process.env.ADMIN_USERNAME,
                    password: hashedPassword,
                    role: 'admin'
                  });
                  console.log('Admin account created.');
                } else {
                  console.log('Admin account already exists.');
                }
              } catch (err) {
                console.error('Error connecting to the database:', err);
                process.exit(1);
              } finally {
                await client.close();
              }
            }

            createAdmin();
          "

      - name: Deploy Application
        if: success()
        run: |
          echo "Deploying application..."
